// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------START USERS && PERMISSIONS && ROLES && TOKENS------------------ //
model Action {
  id   Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  name String @unique @db.VarChar(30)

  action      ActionEnum
  permissions Permission[]
}

enum ActionEnum {
  Create
  Read
  Update
  Delete
}

model AccessSubject {
  id   Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  name String @db.VarChar(50)

  permissions   Permission[]
  accessSubject AccessSubjectEnum @map("access_subject")

  @@map("access_subject")
}

enum AccessSubjectEnum {
  Admin
  Journal
  Report
}

model Permission {
  id Int @id @default(autoincrement()) @db.UnsignedSmallInt

  roles RolesOnPermissions[]

  accessSubject   AccessSubject @relation(fields: [accessSubjectId], references: [id], onDelete: Cascade)
  accessSubjectId Int           @map("access_subject_id") @db.UnsignedSmallInt
  action          Action        @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId        Int           @map("action_id") @db.UnsignedSmallInt
}

model Role {
  id   Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  name String @unique @db.VarChar(30)

  permissions RolesOnPermissions[]
  role        RoleEnum             @unique
  users       UsersOnRoles[]
}

model RolesOnPermissions {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int        @map("role_id") @db.UnsignedSmallInt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int        @map("permission_id") @db.UnsignedSmallInt

  @@id([roleId, permissionId])
  @@map("role_permission")
}

enum RoleEnum {
  Admin
  Teacher
  Manager
}

model Token {
  refreshToken String    @id @db.VarChar(400)
  expires      DateTime? @db.DateTime()
  userAgent    String    @map("user_agent") @db.Text
  updatedAt    DateTime  @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id") @db.UnsignedInt
}

model User {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  lastName   String @map("last_name") @db.VarChar(30)
  firstName  String @map("first_name") @db.VarChar(30)
  middleName String @map("middle_name") @db.VarChar(30)
  login      String @unique @db.VarChar(30)
  password   String @db.VarChar(60)

  tokens   Token[]
  roles    UsersOnRoles[]
  journals Journal[]
}

model UsersOnRoles {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id") @db.UnsignedInt
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int  @map("role_id") @db.UnsignedSmallInt

  @@id([userId, roleId])
  @@map("user_role")
}

// ------------------END USERS && PERMISSIONS && ROLES && TOKENS------------------ //

// ------------------START STUDENTS && GROUPS && SUBGROUPS && STATUSES------------------ //

model Group {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  name      String @unique @db.VarChar(50)
  startYear Int    @map("start_year") @db.UnsignedSmallInt

  students  StudentsOnGroups[]
  subgroups Subgroup[]
}

model Student {
  id           Int    @id @default(autoincrement()) @db.UnsignedInt
  lastName     String @map("last_name") @db.VarChar(30)
  firstName    String @map("first_name") @db.VarChar(30)
  middleName   String @map("middle_name") @db.VarChar(30)
  passportID   String @unique @map("passport_ID") @db.VarChar(6)
  recordBookID String @unique @map("record_book_ID") @db.VarChar(6)

  attestations AttestationsOnStudents[]
  groups       StudentsOnGroups[]
  visits       Visit[]
  points       Points[]
  statuses     StudentStatusesOnStudents[]
  subgroups    StudentsOnSubgroups[]
}

model StudentsOnGroups {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  dateOfIssue     DateTime  @map("date_of_issue")
  dateOfDischarge DateTime? @map("date_of_discharge")

  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int     @map("group_id") @db.UnsignedInt
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int     @map("student_id") @db.UnsignedInt

  @@map("student_group")
}

model StudentStatus {
  id   Int    @id @default(autoincrement()) @db.UnsignedTinyInt
  name String @db.VarChar(50)

  students StudentStatusesOnStudents[]

  @@map("student_status")
}

model StudentStatusesOnStudents {
  dateOfIssue DateTime  @map("date_of_issue")
  endDate     DateTime? @map("end_date")

  studentStatus   StudentStatus @relation(fields: [studentStatusId], references: [id], onDelete: Cascade)
  studentStatusId Int           @map("student_status_id") @db.UnsignedTinyInt
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       Int           @map("student_id") @db.UnsignedInt

  @@id([studentStatusId, studentId])
  @@map("student_status_student")
}

model StudentsOnSubgroups {
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int      @map("student_id") @db.UnsignedInt
  subgroup   Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  subgroupId Int      @map("subgroup_id") @db.UnsignedInt

  @@id([studentId, subgroupId])
  @@map("student_subgroup")
}

model Subgroup {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  journals SubgroupsOnJournals[]
  lessons  LessonsOnSubgroups[]
  students StudentsOnSubgroups[]

  group            Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId          Int            @map("group_id") @db.UnsignedInt
  subgroupNumber   SubgroupNumber @relation(fields: [subgroupNumberId], references: [id], onDelete: Cascade)
  subgroupNumberId Int            @map("subgroup_number_id") @db.UnsignedTinyInt
}

model SubgroupNumber {
  id    Int @id @default(autoincrement()) @db.UnsignedTinyInt
  value Int @unique @db.UnsignedTinyInt

  subgroups Subgroup[]

  @@map("subgroup_number")
}

model SubgroupsOnJournals {
  subgroup   Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  subgroupId Int      @map("subgroup_id") @db.UnsignedInt
  journal    Journal  @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId  Int      @map("journal_id") @db.UnsignedInt

  @@id([subgroupId, journalId])
  @@map("subgroup_journal")
}

// ------------------END STUDENTS && GROUPS && STATUSES------------------ //

// ------------------START ATTESTATIONS && GRADES && JOURNALS && LESSONS && POINTS && VISITS------------------ //

model Annotation {
  id   Int     @id @default(autoincrement()) @db.UnsignedInt
  name String? @db.VarChar(100)

  points Points[]

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId Int    @map("lesson_id") @db.UnsignedInt
}

model Attestation {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  workTopic     String? @map("work_topic") @db.VarChar(250)
  maximumPoints Int?    @map("maximum_points") @db.UnsignedSmallInt

  students AttestationsOnStudents[]

  workType   WorkType? @relation(fields: [workTypeId], references: [id], onDelete: Cascade)
  workTypeId Int?      @map("work_type_id") @db.UnsignedTinyInt
  journal    Journal   @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId  Int       @map("journal_id") @db.UnsignedInt
}

model Grade {
  id    Int @id @default(autoincrement()) @db.UnsignedTinyInt
  value Int @unique @db.UnsignedTinyInt

  journals JournalsOnGrades[]
}

model Journal {
  id              Int      @id @default(autoincrement()) @db.UnsignedInt
  lectureHours    Int      @map("lecture_hours") @db.UnsignedSmallInt
  practiceHours   Int      @map("practice_hours") @db.UnsignedSmallInt
  laboratoryHours Int      @map("laboratory_hours") @db.UnsignedSmallInt
  maximumPoints   Int?     @map("maximum_points") @db.UnsignedSmallInt
  createdAt       DateTime @default(now()) @map("created_at")
  semester        Int      @db.UnsignedTinyInt
  deleted         Boolean  @default(false)

  attestations Attestation[]
  grades       JournalsOnGrades[]
  lessons      Lesson[]
  lessonTopics LessonTopic[]
  subgroups    SubgroupsOnJournals[]

  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  disciplineId Int        @map("discipline_id") @db.UnsignedSmallInt
  control      Control    @relation(fields: [controlId], references: [id], onDelete: Cascade)
  controlId    Int        @map("control_id") @db.UnsignedTinyInt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int        @map("user_id") @db.UnsignedInt
}

model JournalsOnGrades {
  minimumPoints Int @map("minimum_points") @db.UnsignedSmallInt

  grade     Grade   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId   Int     @map("grade_id") @db.UnsignedTinyInt
  journal   Journal @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId Int     @map("journal_id") @db.UnsignedInt

  @@id([gradeId, journalId])
  @@map("journal_grade")
}

model Lesson {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  conducted Boolean  @default(false)
  date      DateTime @db.DateTime()

  annotations Annotation[]
  visits      Visit[]
  subgroups   LessonsOnSubgroups[]

  journal       Journal      @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId     Int          @map("journal_id") @db.UnsignedInt
  lessonTopic   LessonTopic? @relation(fields: [lessonTopicId], references: [id], onDelete: Cascade)
  lessonTopicId Int?         @map("lesson_topic_id") @db.UnsignedInt
  lessonType    LessonType   @relation(fields: [lessonTypeId], references: [id], onDelete: Cascade)
  lessonTypeId  Int          @map("lesson_type_id") @db.UnsignedTinyInt
}

model LessonTopic {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(250)

  lessons Lesson[]

  journal      Journal    @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId    Int        @map("journal_id") @db.UnsignedInt
  lessonType   LessonType @relation(fields: [lessonTypeId], references: [id], onDelete: Cascade)
  lessonTypeId Int        @map("lesson_type_id") @db.UnsignedTinyInt

  @@unique([journalId, lessonTypeId, name])
  @@map("lesson_topic")
}

model LessonsOnSubgroups {
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   Int      @map("lesson_id") @db.UnsignedInt
  subgroup   Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  subgroupId Int      @map("subgroup_id") @db.UnsignedInt

  @@id([lessonId, subgroupId])
  @@map("lesson_subgroup")
}

model LessonType {
  id   Int    @id @default(autoincrement()) @db.UnsignedTinyInt
  name String @unique @db.VarChar(50)

  lessons      Lesson[]
  lessonTopics LessonTopic[]

  @@map("lesson_type")
}

model Points {
  id             Int  @id @default(autoincrement()) @db.UnsignedInt
  numberOfPoints Int? @map("number_of_points") @db.UnsignedTinyInt

  annotation   Annotation @relation(fields: [annotationId], references: [id], onDelete: Cascade)
  annotationId Int        @map("annotation_id") @db.UnsignedInt
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int        @map("student_id") @db.UnsignedInt

  @@unique([annotationId, studentId])
}

model AttestationsOnStudents {
  credited Boolean @default(false)
  points   Int?    @db.UnsignedTinyInt
  grade    Int?    @db.UnsignedTinyInt

  attestation   Attestation @relation(fields: [attestationId], references: [id], onDelete: Cascade)
  attestationId Int         @map("attestation_id") @db.UnsignedInt
  student       Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId     Int         @map("student_id") @db.UnsignedInt

  @@id([attestationId, studentId])
  @@map("attestation_student")
}

model Visit {
  isAbsent Boolean @default(false) @map("is_absent")

  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  Int     @map("lesson_id") @db.UnsignedInt
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int     @map("student_id") @db.UnsignedInt

  @@id([lessonId, studentId])
}

// ------------------END ATTESTATIONS && GRADES && JOURNALS && LESSONS && POINTS && VISITS------------------ //

model Control {
  id   Int    @id @default(autoincrement()) @db.UnsignedTinyInt
  name String @unique @db.VarChar(50)

  journals Journal[]
}

model Discipline {
  id   Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  name String @unique @db.VarChar(150)

  journals Journal[]
}

model WorkType {
  id   Int    @id @default(autoincrement()) @db.UnsignedTinyInt
  name String @unique @db.VarChar(50)

  attestations Attestation[]

  @@map("work_type")
}
